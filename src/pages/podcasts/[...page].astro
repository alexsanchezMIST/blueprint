---
import Layout from "../../layouts/Layout.astro";
import Section from "../../components/Section.astro";
import Container from "../../components/Container.astro";
import Search from "../../components/Search.astro";
import PostCard from "../../components/PostCard.astro";

import { getPodcastsPageContent, getAllPodcasts } from "../../lib/queries.js";

export async function getStaticPaths({ paginate }) {
  const podcasts = await getAllPodcasts();
  const allPodcasts = podcasts.edges;

  return paginate(allPodcasts, { pageSize: 9 });
}

const podcastsPage = await getPodcastsPageContent();

const { page } = Astro.props;
---

<Layout>
  <Section>
    <Container>
      <div class="heading--wrapper">
        <h1 class="blog--heading">
          Listen to the <span class="span">podcasts</span>
        </h1>
        <div class="blog--subheading" set:html={podcastsPage.content}></div>
      </div>
      <Search slug="podcasts" />
    </Container>
  </Section>
  <Section>
    <Container>
      <div class="pagination--wrapper py-6">
        {page.url.prev ? (
          <a href={page.url.prev || "#"} class="pagination--previous">
            ← Previous
          </a>
        ) : null}
        <div class="pages--wrapper">
          <a href="/posts" class="pages--link">1</a>
          {page.currentPage !== 1 ? (
            <a href="#" class="pages--link current">
              {page.currentPage}
            </a>
          ) : null}
          <p>...</p>
          <a href={`/posts/${page.lastPage}/`} class="pages--link"
            >{page.lastPage}
          </a>
        </div>
        {page.url.next ? (
          <a href={page.url.next || "#"} class="pagination--next">
            Next →
          </a>
        ) : null}
      </div>
      <div class="post--card--wrapper">
        {page.data.map(
          (podcast) =>
            podcast.node.featuredImage && (
              <PostCard
                src={podcast.node.featuredImage.node.sourceUrl}
                href={`/podcasts/${podcast.node.slug}`}
                title={podcast.node.title}
              />
            )
        )}
      </div>
      <div class="pagination--wrapper py-6">
        {page.url.prev ? (
          <a href={page.url.prev || "#"} class="pagination--previous">
            ← Previous
          </a>
        ) : null}
        <div class="pages--wrapper">
          <a href="/posts" class="pages--link">1</a>
          {page.currentPage !== 1 ? (
            <a href="#" class="pages--link current">
              {page.currentPage}
            </a>
          ) : null}
          <p>...</p>
          <a href={`/posts/${page.lastPage}/`} class="pages--link"
            >{page.lastPage}
          </a>
        </div>
        {page.url.next ? (
          <a href={page.url.next || "#"} class="pagination--next">
            Next →
          </a>
        ) : null}
      </div>
    </Container>
  </Section>
</Layout>

<style lang="scss">
  @import "../../styles/variables.scss";

  .blog--heading {
    margin-bottom: map-get($spacing, "400");
  }

  .blog--subheading {
    margin-bottom: map-get($spacing, "600");
  }

  .heading--wrapper {
    display: flex;
    flex-direction: column;
    justify-content: column;
    align-items: column;
    width: min(100%, 48.125rem);
    margin-inline: auto;
    text-align: center;
  }

  .post--card--wrapper {
    display: grid;
    grid-template-columns: repeat(1, minmax(0, 1fr));
    grid-template-rows: repeat(9, minmax(0, 1fr));
    gap: map-get($spacing, "400");

    @media screen and (min-width: map-get($breakpoints, "md")) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
      grid-template-rows: repeat(5, minmax(0, 1fr));
    }

    @media screen and (min-width: map-get($breakpoints, "lg")) {
      grid-template-columns: repeat(3, minmax(0, 1fr));
      grid-template-rows: repeat(3, minmax(0, 1fr));
    }
  }

  .pagination--wrapper {
    width: 100%;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    gap: map-get($spacing, "400");
  }

  .pagination--previous,
  .pagination--next {
    display: inline-flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    padding-block: map-get($spacing, "300");
    padding-inline: map-get($spacing, "400");
    font-size: map-get($font-size, "300");
    font-weight: 500;
    line-height: 1;
    color: map-get($secondary, "500");
    background-color: $white;
    border: 1px solid map-get($secondary, "500");
    border-radius: 0.125rem;
    transition: all 0.3s ease-in-out;

    &:hover {
      background-color: map-get($secondary, "500");
      color: $white;
    }

    &:active {
      border-color: map-get($secondary, "600");
      background-color: map-get($secondary, "600");
      color: $white;
    }
  }

  .pages--wrapper {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    gap: map-get($spacing, "600");
  }

  .pages--link {
    font-size: map-get($font-size, "300");
    line-height: 1;
    font-weight: 500;
    color: map-get($neutrals, "400");
    transition: color 0.3s ease-in-out;

    &:hover {
      color: map-get($secondary, "500");
    }

    &.current {
      color: map-get($secondary, "500");

      &:hover {
        color: map-get($secondary, "600");
      }
    }
  }
</style>
